{"version":3,"sources":["components/Button.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","props","console","log","JSON","stringify","onClick","sign","updateCount","App","state","count","value","this","setState","prevState","handleCount","bind","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGaA,G,MAAS,SAACC,GAIrB,OAFAC,QAAQC,IAAI,SAAWC,KAAKC,UAAUJ,IAGpC,wBAAQK,QAAS,iBACD,KAAdL,EAAMM,KAAcN,EAAMO,YAAY,GAAKP,EAAMO,aAAa,IADhE,SAEGP,EAAMM,SC6BEE,E,kDAnCb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,MAAO,GAETT,QAAQC,IAAI,eALK,E,wDAQPS,GACVC,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAAEJ,MAAOI,EAAUJ,MAAQC,MACzDV,QAAQC,IAAI,iB,+BAKZ,OADAD,QAAQC,IAAI,UAGV,gCACE,iDAAoBU,KAAKH,MAAMC,SAC/B,uBACA,cAAC,EAAD,CACEJ,KAAK,IACLI,MAAOE,KAAKH,MAAMC,MAClBH,YAAaK,KAAKG,YAAYC,KAAKJ,QAErC,cAAC,EAAD,CACEN,KAAK,IACLI,MAAOE,KAAKH,MAAMC,MAClBH,YAAaK,KAAKG,YAAYC,KAAKJ,e,GA7B3BK,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e0f5190.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nexport const Button = (props) => {\r\n  \r\n  console.log(\"props \" + JSON.stringify(props) );\r\n\r\n  return (\r\n    <button onClick={() =>\r\n      props.sign == \"+\" ? props.updateCount(1) : props.updateCount(-1)} >\r\n      {props.sign}\r\n    </button>\r\n\r\n  );\r\n}\r\n\r\n\r\n","import React, { Component } from \"react\";\nimport { Button } from \"./components/Button\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 1,\n    };\n    console.log(\"constructor\");\n  }\n\n  handleCount(value) {\n    this.setState((prevState) => ({ count: prevState.count + value }));\n    console.log(\"handleCount\");\n  }\n\n  render() {\n    console.log(\"render\");\n    return (\n      \n      <div>\n        <h1>Current count: {this.state.count}</h1>\n        <hr />\n        <Button\n          sign=\"+\"\n          count={this.state.count}\n          updateCount={this.handleCount.bind(this)}\n        />\n        <Button\n          sign=\"-\"\n          count={this.state.count}\n          updateCount={this.handleCount.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}